import R from 'ramda'

export const getMarkerById = (state, id) => R.prop(id, state.markers)

export const getMarkers = (state, ownProps) => {
    const activeCategoryId = getActiveCategoryId(ownProps)
    const applySearch = item => R.contains(
        state.markersPage.search,
        R.prop('name', item)
    )
    const applyCategory = item => R.equals(
        activeCategoryId,
        R.prop('categoryId', item)
    )

  const markers = R.compose(
      R.filter(applySearch),
      R.when(R.always(activeCategoryId), R.filter(applyCategory)),
      R.map(id => getMarkerById(state, id))
  )(state.markersPage.ids)

  return markers
}

export const getRenderedMarkersLength = state => R.length(state.markersPage.ids)

export const getTotalBasketCount = state => R.length(state.basket)

export const getTotalBasketPrice = state => {
  const totalPrice = R.compose(
    R.sum,
    R.pluck('price'),
    R.map(id => getMarkerById(state, id))
  )(state.basket)

  return totalPrice
}

export const getCategories = state => R.values(state.categories)

export const getActiveCategoryId = ownProps => R.path(['params', 'id'], ownProps)

export const getBasketMarkersWithCount = state => {
    const uniqueIds = R.uniq(state.basket)
    const markerCount = id => R.compose(
        R.length,
        R.filter(basketId => R.equals(id, basketId))
    )(state.basket)
    const markerWithCount = marker => R.assoc('count', markerCount(marker.id), marker)
    const markers = R.compose(
        R.map(markerWithCount),
        R.map(id => getMarkerById(state, id))
    )(uniqueIds)
    return markers
}